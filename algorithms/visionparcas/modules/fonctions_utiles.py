# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ClassName
                                 A QGIS plugin
 Description du plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-11-20
        copyright            : (C) 2019 by Cécile Duchêne, ENSG
        email                : cecile.duchene@ensg.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Charles d\'Andigne et Amina Barmani, ENSG, IGN, LaSTIG'
__date__ = '2019-11-20'
__copyright__ = '(C) 2019 by Charles d\'Andigne et Amina Barmani, ENSG, IGN, LaSTIG'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'
from qgis.PyQt.QtCore import (QCoreApplication,QVariant)
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterNumber,
                       QgsFeature,
                       QgsField,
                       QgsFields,
                       QgsWkbTypes)
import random
class FonctionsUtiles(QgsProcessingAlgorithm):
    def createRandomPointsOnGeomContour(feature,count):
        output_id = 0
        # On calcule la longueur de la ligne.
        geom = feature.geometry()
        length = geom.length()
        # Objet pour stocker les features points crées.
        feats = []
        # Calculer la distance qui sépare les pts
        distEqua = length / count
        # Ajouter le 1er pt aléatoirement
        locPt = random.uniform(0, distEqua)
        point = geom.interpolate(locPt)
        fet = QgsFeature()
        output_id += 1
        fet.setAttributes([output_id])
        fet.setGeometry(point)
        feats.append(fet)
        count2 = count - 1
        while count2 != 0:
            output_id += 1
            locPt = locPt + distEqua
            pointE = geom.interpolate(locPt)
            count2 = count2 - 1
            fet = QgsFeature()
            fet.setAttributes([output_id])
            fet.setGeometry(pointE)
            # Add a point in feat
            feats.append(fet)

        return feats