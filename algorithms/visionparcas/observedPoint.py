# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Choucas_visibility
                                 A QGIS plugin
 Calcul de visibilité et des incertitudes
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-07-08
        copyright            : (C) 2019 by Choucas
        email                : Mohssine.Kaouadji@ign.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Choucas'
__date__ = '2019-07-08'
__copyright__ = '(C) 2019 by Choucas'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                        QgsFeatureSink,
                        QgsProcessingException,
                        QgsProcessingAlgorithm,
                        QgsFeatureSink,
                        QgsProcessingParameterRasterLayer,
                        QgsProcessingParameterFeatureSource,
                        QgsProcessingParameterFeatureSink,
                        QgsProcessingParameterNumber,
                        QgsProcessingParameterField,
                        QgsProcessingParameterFile,
                        QgsProcessingParameterRasterDestination,
                        QgsWkbTypes)
import processing

from .modules import Points as pts
from .modules import Raster as rst

class ObservedPoint(QgsProcessingAlgorithm):
    """
    Permet de créer un point contenant les informations nécessaires pour réaliser
    le calcul de visibilité passive à partir d'un point en entrée.
    
    INPUTS :
        - OBSERVED_POINT : QgsVectorLayer(Point)
        Point observé
        
        - DEM : QgsRasterLayer
        MNT
        
        - OUTPUT : QgsVectorLayer(Point)
        Point créé qui contient les informations de hauteur de la cible et rayon d'analyse
        
        - RADIUS : Integer
        Rayon à partir du point en entrée. Définit le rayon dans lequel le calcul
        du DBH va s'effectuer lors du calcul de visibilité passive.
        
        - TARGET_HEIGHT : Float
        Hauteur de la cible : hauteur du point observé.
        
    OUTPUT : 
        Un point ayant pour attribut une hauteur de cible et un rayon d'analyse
        et qui a été paramétré pour être entrer dans le calcul de visibilité passive.
    
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.
    
    """ Inputs pour la création de point """
    
    OBSERVED_POINTS = 'OBSERVED_POINTS'
    DEM = 'DEM'
    OUTPUT = 'OUTPUT'
    #OBSERVED_PT_ID = 'OBSERVED_PT_ID'
    RADIUS = 'RADIUS'
    #RADIUS_FIELD = 'RADIUS_FIELD'
    TARGET_HEIGHT = 'TARGET_HEIGHT'
    #TARGET_HEIGHT_FIELD = 'TARGET_HEIGHT_FIELD'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.OBSERVED_POINTS,
                self.tr('Point observé'),
                [QgsProcessing.TypeVectorPoint]
                )
            )
        """
        self.addParameter(QgsProcessingParameterField(
            self.OBSERVED_PT_ID,
            self.tr('Point observed ids (leave unchanged to use feature ids)'),
            parentLayerParameterName = self.OBSERVED_POINTS,
            optional=True
            ))
       """
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.DEM,
                self.tr('Digital elevation model')
                )
            )
        
        self.addParameter(QgsProcessingParameterNumber(
            self.RADIUS,
            self.tr("Radius of analysis, meters"),
            QgsProcessingParameterNumber.Integer,
            defaultValue= 5000))
        """
        self.addParameter(QgsProcessingParameterField(
            self.RADIUS_FIELD,
            self.tr('Field value for analysis radius'),
            parentLayerParameterName = self.OBSERVED_POINTS,
            optional=True))
        """
        self.addParameter(QgsProcessingParameterNumber(
            self.TARGET_HEIGHT,
            self.tr('Target height, meters'),
            QgsProcessingParameterNumber.Double,
            defaultValue= 0.0))
        """
        self.addParameter(QgsProcessingParameterField(
            self.TARGET_HEIGHT_FIELD,
            self.tr('Field value for target height'),
            parentLayerParameterName =self.OBSERVED_POINTS,
            optional=True))
        """
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer')) )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        # The first thing to do is retrieve the values of the parameters
        # entered by the user
        raster = self.parameterAsRasterLayer(parameters,self.DEM, context)
        Points_layer = self.parameterAsVectorLayer(parameters, self.OBSERVED_POINTS, context)

        #observed_id = self.parameterAsString(parameters, self.OBSERVED_PT_ID, context)

        target_height = self.parameterAsDouble(parameters,self.TARGET_HEIGHT, context)
        #target_height_field =  self.parameterAsString(parameters,self.TARGET_HEIGHT_FIELD,context)

        radius = self.parameterAsDouble(parameters, self.RADIUS, context)
        #radius_field = self.parameterAsString(parameters, self.RADIUS_FIELD, context)
        
        if raster.crs().mapUnits() != 0 :
            err= " \n ****** \n ERROR! \n Raster data has to be projected in a metric system!"
            feedback.reportError(err, fatalError = True)
            raise QgsProcessingException(err)

        if round(abs(raster.rasterUnitsPerPixelX()), 2) !=  round(abs(raster.rasterUnitsPerPixelY()),2):

            err= (" \n ****** \n ERROR! \n Raster pixels are irregular in shape " +
                  "(probably due to incorrect projection)!")
            feedback.reportError(err, fatalError = True)
            raise QgsProcessingException(err)

        points = pts.Points(Points_layer,
                            crs = Points_layer.sourceCrs(),
                            project_crs = raster.crs())
        
        points.clean_parameters( target_height, radius,
                           #z_targ = 0,
                           field_ID = None,
                           field_zobs = None,
                           #field_ztarg= 0,
                           field_radius= None)
                           #folder = output_dir)

        #Vérifier que la couche contient au moins un point :
        if not len(points.pt):
            err= " \n ****** \n ERROR! \n No points were found, possibly a projection error!"
            feedback.reportError(err, fatalError = True)
            raise QgsProcessingException(err)
        
        
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,
                context,
                            points.field_defs(),
                            Points_layer.wkbType(),
                            raster.crs()) # attention ! REPROJECTED

        feedback.pushInfo(str(self.OUTPUT))

        for f in points.return_points():
            sink.addFeature(f, QgsFeatureSink.FastInsert)
            
        
        return {self.OUTPUT: dest_id}

    def shortHelpString(self):

        h = ("""
            This is the first step for the visibility analysis. The result will be written as a geopackage file with standardised field names and reprojected to match the elevation model used (if needed).

            <h3>Parameters</h3>

            <ul>
                <li> <em>Observer IDs</em>: viewpoints can be assigned individual names or id numbers, stored in the associated table. Otherwise, internal ids will be used (sequential numbers).</li>
                <li> <em>Observer height</em>: in meters.</li>
                <li> <em>Target height</em>: height value to be added to all terrain areas checked for visibility from the observer point.</li>
                <li> <em>Radius of analysis</em>: maximum distance for visibility testing, in meters.</li>
            </ul>

            For more see <a href="http://www.zoran-cuckovic.from.hr/QGIS-visibility-analysis/help_qgis3.html">help online</a>

            """)

        return h
    
    
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'observedpoint'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr("xinterm - Création point observé")

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'visionparcas'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return ObservedPoint()
